name: CI & CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ====================================================================================
  # JOB 1: LINT & FORMAT
  # ====================================================================================
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Set up Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install all dependencies
        run: |
          npm ci --force
          pip install -r backend/requirements.txt
          pip install ruff
          pip install -e .
      
      - name: Lint Frontend
        run: npm run lint:frontend

      - name: Lint and Format Check Backend
        run: |
          ruff check . --output-format=github
          ruff format --check .

  # ====================================================================================
  # JOB 2: UNIT TESTS
  # ====================================================================================
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: "testing"
      AWS_SECRET_ACCESS_KEY: "testing"
      AWS_SECURITY_TOKEN: "testing"
      AWS_SESSION_TOKEN: "testing"
      AWS_DEFAULT_REGION: "us-east-1"
      GCS_BUCKET: "test-bucket"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Set up Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install all dependencies
        run: |
          npm ci --force
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov "moto[s3]"
          pip install -e .

      - name: Fix Python test imports
        run: |
          find backend/open_webui/test -type f -name 'test_*.py' -exec sed -i 's/from test.util/from open_webui.test.util/g' {} +
          sed -i 's/MAX_RETRY_COUNT/REDIS_SENTINEL_MAX_RETRY_COUNT/g' backend/open_webui/test/util/test_redis.py
          sed -i '1s/^/from moto import mock_aws\n/' backend/open_webui/test/apps/webui/storage/test_provider.py
          sed -i '/def test_gcs_storage_provider/i @mock_aws' backend/open_webui/test/apps/webui/storage/test_provider.py

      - name: Run Frontend Unit Tests
        run: npm run test:frontend

      - name: Run Backend Unit Tests
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
        run: pytest backend/open_webui/test/

  # ====================================================================================
  # JOB 3: SECURITY SCANS
  # ====================================================================================
  security-scans:
    name: Security Scans (SCA & Secrets)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Set up Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install all dependencies
        run: |
          npm ci --force
          pip install -r backend/requirements.txt

      - name: SCA - Frontend
        run: npm audit --audit-level=high

      - name: SCA - Backend
        run: |
          pip install pip-audit
          pip-audit

      - name: Secrets Scan with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml

  # ====================================================================================
  # JOB 4: CODEQL ANALYSIS
  # ====================================================================================
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python, javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # ====================================================================================
  # JOB 5: BUILD & PUSH DOCKER IMAGE
  # ====================================================================================
  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security-scans, codeql-analysis]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/open-webui:latest